import { poolPromise } from "../db/connection.js";
import sql from "mssql";

// ‚úÖ 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≤–∞–ª—é—Ç–∏ (–∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –∫—É—Ä—Å–∞–º–∏)
export const getCurrencies = async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request().query(`
      SELECT CurrencyID, CurrencyName, CurrencyCode, BuyRate, SellRate, UpdatedAt
      FROM Currencies
      ORDER BY CurrencyCode
    `);
    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ getCurrencies:", err);
    res.status(500).send("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–ª—é—Ç");
  }
};

// ‚úÖ 2. –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–∞—Ä –∑ –∫—É—Ä—Å–∞–º–∏
export const getExchangePairs = async (req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request().query(`
      SELECT PairID, FromCurrency, ToCurrency, Rate, RateType
      FROM v_ExchangeRates
      ORDER BY FromCurrency, ToCurrency
    `);
    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ getExchangePairs:", err);
    res.status(500).send("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä –æ–±–º—ñ–Ω—É");
  }
};

// ‚úÖ 3. –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –º—ñ–∂ –¥–≤–æ–º–∞ –≤–∞–ª—é—Ç–∞–º–∏ (–¥–∏–Ω–∞–º—ñ—á–Ω–æ)
export const getExchangeRate = async (req, res) => {
  try {
    const pool = await poolPromise;
    const { from, to } = req.query;

    if (!from || !to) {
      return res.status(400).json({ error: "–í–∫–∞–∂—ñ—Ç—å –∫–æ–¥–∏ –≤–∞–ª—é—Ç 'from' —ñ 'to'" });
    }

    // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å —á–µ—Ä–µ–∑ ExchangePairs
    const result = await pool.request()
      .input("from", sql.NVarChar(10), from)
      .input("to", sql.NVarChar(10), to)
      .query(`
        SELECT
          cFrom.CurrencyCode AS FromCode,
          cTo.CurrencyCode   AS ToCode,
          cFrom.BuyRate      AS FromBuy,
          cFrom.SellRate     AS FromSell,
          cTo.BuyRate        AS ToBuy,
          cTo.SellRate       AS ToSell,
          ep.IsAllowed
        FROM ExchangePairs ep
        JOIN Currencies cFrom ON ep.FromCurrencyID = cFrom.CurrencyID
        JOIN Currencies cTo   ON ep.ToCurrencyID   = cTo.CurrencyID
        WHERE cFrom.CurrencyCode = @from
          AND cTo.CurrencyCode   = @to
          AND ep.IsAllowed = 1
      `);

    if (result.recordset.length === 0) {
      return res.status(404).json({ error: "–ü–∞—Ä–∞ –æ–±–º—ñ–Ω—É –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∞" });
    }

    const row = result.recordset[0];

    let rate = 0;
    let rateType = "";

    // üî∏ –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–±–º—ñ–Ω—É
    if (row.FromCode === "UAH") {
      // UAH ‚Üí CUR (–∫–ª—ñ—î–Ω—Ç –∫—É–ø—É—î –≤–∞–ª—é—Ç—É)
      rate = 1 / parseFloat(row.ToSell);
      rateType = "UAH‚ÜíCUR";
    } else if (row.ToCode === "UAH") {
      // CUR ‚Üí UAH (–∫–ª—ñ—î–Ω—Ç –ø—Ä–æ–¥–∞—î –≤–∞–ª—é—Ç—É)
      rate = parseFloat(row.FromBuy);
      rateType = "CUR‚ÜíUAH";
    } else {
      // CUR ‚Üí CUR (–∫—Ä–æ—Å-–∫—É—Ä—Å)
      rate = parseFloat(row.ToBuy) / parseFloat(row.FromSell);
      rateType = "CROSS";
    }

    res.json({ Rate: rate, RateType: rateType });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ getExchangeRate:", err);
    res.status(500).send("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –æ–±–º—ñ–Ω—É");
  }
};


// ‚úÖ 4. –í–∏–∫–æ–Ω–∞—Ç–∏ –æ–±–º—ñ–Ω —á–µ—Ä–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É sp_PerformExchange
export const makeExchange = async (req, res) => {
try {
    const pool = await poolPromise;
    const { clientId, cashierId, pointId, fromCode, toCode, amountFrom } = req.body;

    const result = await pool.request()
      .input("ClientID", sql.Int, clientId)
      .input("CashierID", sql.Int, cashierId)
      .input("PointID", sql.Int, pointId)
      .input("FromCode", sql.NVarChar(10), fromCode)
      .input("ToCode", sql.NVarChar(10), toCode)
      .input("AmountFrom", sql.Decimal(20,6), amountFrom)
      .execute("sp_PerformExchange");

    res.json({
      success: true,
      message: "–û–ø–µ—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ",
      data: result.recordset[0],
    });

  } catch (err) {
    // –Ø–∫—â–æ —Ü–µ –±—ñ–∑–Ω–µ—Å-–ø–æ–º–∏–ª–∫–∞ –∑ SQL THROW
    if (err.number === 50000) {
      return res.status(400).json({
        success: false,
        message: err.originalError.message || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó",
      });
    }

    // –Ü–Ω—à—ñ (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ) –ø–æ–º–∏–ª–∫–∏
    console.error("‚ùå performExchange error:", err);
    res.status(500).json({
      success: false,
      message: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—ñ–¥ —á–∞—Å –æ–±–º—ñ–Ω—É –≤–∞–ª—é—Ç",
    });
  }
};

// // ‚úÖ 5. –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –æ–ø–µ—Ä–∞—Ü—ñ—ó (—á–µ—Ä–µ–∑ VIEW)
// export const getLatestOperations = async (req, res) => {
//   try {
//     const pool = await poolPromise;
//     const result = await pool.request().query(`
//       SELECT TOP 3
//         OperationID,
//         ClientName,
//         CashierName,
//         PointName,
//         FromCurrency,
//         AmountFrom,
//         ToCurrency,
//         AmountTo,
//         RateFrom,
//         RateTo,
//         TotalUAH,
//         OperationDate
//       FROM v_OperationsInfo
//       ORDER BY OperationDate DESC
//     `);
//     res.json(result.recordset);
//   } catch (err) {
//     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ getLatestOperations:", err);
//     res.status(500).send("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π");
//   }
//   };
// ‚úÖ 5. –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –æ–ø–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞—Å–∏—Ä–∞
export const getLatestOperations = async (req, res) => {
  try {
    const { cashierId } = req.query; // <-- –æ—Ç—Ä–∏–º—É—î–º–æ ID –∫–∞—Å–∏—Ä–∞ –∑ –∑–∞–ø–∏—Ç—É
    const pool = await poolPromise;

    const result = await pool.request()
      .input("cashierId", sql.Int, cashierId)
      .query(`
        SELECT TOP 3
          OperationID,
          ClientName,
          CashierName,
          PointName,
          FromCurrency,
          AmountFrom,
          ToCurrency,
          AmountTo,
          RateFrom,
          RateTo,
          TotalUAH,
          OperationDate
        FROM v_OperationsInfo
        WHERE CashierID = @cashierId
        ORDER BY OperationDate DESC
      `);

    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ getLatestOperations:", err);
    res.status(500).send("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∫–∞—Å–∏—Ä–∞");
  }
};

// ‚úÖ 6. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç
export const checkClient = async (req, res) => {
  try {
    const pool = await poolPromise;
    const { id } = req.params;

    const result = await pool.request()
      .input("id", sql.Int, id)
      .query("SELECT ClientID FROM Clients WHERE ClientID = @id");

    res.json({ exists: result.recordset.length > 0 });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ checkClient:", err);
    res.status(500).send("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞");
  }
};
