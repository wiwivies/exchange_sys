import React, { useEffect, useState } from "react";
import axios from "axios";
import { FaTrash, FaEdit, FaInfoCircle, FaFilePdf, FaFileExcel } from "react-icons/fa";
import "bootstrap/dist/css/bootstrap.min.css";
import ClientInfoModal from "./Clients modals/ClientInfoModal";
import ClientEditModal from "./Clients modals/ClientEditModal";

// üì¶ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

const ClientsInfoTab = () => {
  const [clients, setClients] = useState([]);
  const [search, setSearch] = useState("");
  const [selectedClient, setSelectedClient] = useState(null);
  const [editClient, setEditClient] = useState(null);
  const [stats, setStats] = useState({ totalClients: 0, avgAge: 0 });
  const [loadingClients, setLoadingClients] = useState(false);

  // --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ ---
  const fetchClients = async () => {
    try {
      setLoadingClients(true);
const res = await axios.get("http://localhost:5000/api/clientsAdmin");      const data = res.data || [];
      setClients(data);
      calculateStats(data); // –≤–∞–∂–ª–∏–≤–æ: –æ–±—á–∏—Å–ª–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—É—Ç
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤:", err);
    } finally {
      setLoadingClients(false);
    }
  };

  useEffect(() => {
    fetchClients();
  }, []);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const calculateStats = (data) => {
    if (!data || data.length === 0) {
      setStats({ totalClients: 0, avgAge: 0 });
      return;
    }
    const total = data.length;
    const avgAge = Math.round(
      data.reduce((acc, c) => acc + getAge(c.DateOfBirth), 0) / total
    );
    setStats({ totalClients: total, avgAge });
  };

  const getAge = (birthDate) => {
    if (!birthDate) return 0;
    const diff = Date.now() - new Date(birthDate).getTime();
    return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));
  };

  // --- –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ---
  const handleDelete = async (id) => {
    if (!window.confirm("–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞?")) return;
    try {
      await axios.delete(`http://localhost:5000/api/clientsAdmin/${id}`);
      const updated = clients.filter((c) => c.ClientID !== id);
      setClients(updated);
      calculateStats(updated);
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:", err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.");
    }
  };

  // --- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞ (–æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É) ---
  const handleInfo = async (clientId) => {
    try {
      const res = await axios.get(`http://localhost:5000/api/clientsAdmin/${clientId}/operations`);
      const client = clients.find((c) => c.ClientID === clientId);
      setSelectedClient({ ...client, operations: res.data || [] });
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –æ–ø–µ—Ä–∞—Ü—ñ–π:", err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –æ–ø–µ—Ä–∞—Ü—ñ–π. –ü–µ—Ä–µ–≤—ñ—Ä –∫–æ–Ω—Å–æ–ª—å.");
    }
  };

  // --- –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ---
  const handleEdit = (client) => {
    setEditClient(client);
  };

  const handleSaveEdit = async (updatedClient) => {
    try {
      // –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–∞—Ç–∏ –¥–æ —Ñ–æ—Ä–º–∞—Ç—É ISO —è–∫—â–æ —î DateOfBirth —É –ø–æ–ª—ñ
      if (updatedClient.DateOfBirth) {
        // —è–∫—â–æ –ø—Ä–∏—à–ª–æ —è–∫ Date –∞–±–æ —è–∫ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å
        const d = new Date(updatedClient.DateOfBirth);
        if (!isNaN(d)) updatedClient.DateOfBirth = d.toISOString().slice(0, 10); // YYYY-MM-DD
      }

await axios.put(`http://localhost:5000/api/clientsAdmin/${updatedClient.ClientID}`, updatedClient);

      const updatedList = clients.map((c) =>
        c.ClientID === updatedClient.ClientID ? { ...c, ...updatedClient } : c
      );
      setClients(updatedList);
      calculateStats(updatedList);
      setEditClient(null);
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:", err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏. –ü–µ—Ä–µ–≤—ñ—Ä –∫–æ–Ω—Å–æ–ª—å.");
    }
  };

  // --- –ü–æ—à—É–∫ –ø–æ –≤—Å—ñ—Ö –ø–æ–ª—è—Ö ---
  const filteredClients = clients.filter((c) =>
    Object.values(c).some((val) =>
      val ? val.toString().toLowerCase().includes(search.toLowerCase()) : false
    )
  );

  // –¢–∏–º—á–∞—Å–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó –∫–∏—Ä–∏–ª–∏—Ü—ñ (PDF –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –±—É–∫–≤–∏ –±–µ–∑ —à—Ä–∏—Ñ—Ç—É)
const transliterate = (text) => {
  const map = {
    –ê: "A", –∞: "a", –ë: "B", –±: "b", –í: "V", –≤: "v",
    –ì: "H", –≥: "h", “ê: "G", “ë: "g", –î: "D", –¥: "d",
    –ï: "E", –µ: "e", –Ñ: "Ye", —î: "ie", –ñ: "Zh", –∂: "zh",
    –ó: "Z", –∑: "z", –ò: "Y", –∏: "y", –Ü: "I", —ñ: "i",
    –á: "Yi", —ó: "i", –ô: "Y", –π: "y", –ö: "K", –∫: "k",
    –õ: "L", –ª: "l", –ú: "M", –º: "m", –ù: "N", –Ω: "n",
    –û: "O", –æ: "o", –ü: "P", –ø: "p", –†: "R", —Ä: "r",
    –°: "S", —Å: "s", –¢: "T", —Ç: "t", –£: "U", —É: "u",
    –§: "F", —Ñ: "f", –•: "Kh", —Ö: "kh", –¶: "Ts", —Ü: "ts",
    –ß: "Ch", —á: "ch", –®: "Sh", —à: "sh", –©: "Shch", —â: "shch",
    –Æ: "Yu", —é: "iu", –Ø: "Ya", —è: "ia",
  };
  return text
    .split("")
    .map((char) => map[char] || char)
    .join("");
};

   // --- üìÑ –ï–∫—Å–ø–æ—Ä—Ç —É PDF ---
const exportToPDF = () => {
  const doc = new jsPDF();
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  doc.setFontSize(16);
  // –¢–∞–±–ª–∏—Ü—è
doc.text(transliterate("Customer report"), 14, 15);

autoTable(doc, {
  startY: 25,
  head: [
    [transliterate("ID"), transliterate("–Ü–º‚Äô—è"), transliterate("–ü—Ä—ñ–∑–≤–∏—â–µ"), transliterate("–ü–∞—Å–ø–æ—Ä—Ç"), transliterate("–¢–µ–ª–µ—Ñ–æ–Ω"), transliterate("Email")],
  ],
  body: filteredClients.map((c) => [
    c.ClientID,
    transliterate(c.FirstName),
    transliterate(c.LastName),
    transliterate(c.PassportNumber),
    transliterate(c.Phone),
    transliterate(c.Email),
  ]),
});

  // –ó–±–µ—Ä–µ–≥—Ç–∏
  doc.save("clients_report.pdf");
};

  // --- üìä –ï–∫—Å–ø–æ—Ä—Ç —É Excel ---
  const exportToExcel = () => {
    const wsData = filteredClients.map((c) => ({
      ID: c.ClientID,
      "–Ü–º‚Äô—è": c.FirstName,
      "–ü—Ä—ñ–∑–≤–∏—â–µ": c.LastName,
      –ü–∞—Å–ø–æ—Ä—Ç: c.PassportNumber,
      –¢–µ–ª–µ—Ñ–æ–Ω: c.Phone,
      Email: c.Email,
      "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π": c.OperationsCount ?? 0,
      "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è": c.CreatedAt
        ? new Date(c.CreatedAt).toLocaleDateString("uk-UA")
        : "-",
    }));

    const ws = XLSX.utils.json_to_sheet(wsData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "–ö–ª—ñ—î–Ω—Ç–∏");

    const wbout = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    saveAs(new Blob([wbout], { type: "application/octet-stream" }), "Clients_Report.xlsx");
  };


  return (
    <div className="container mt-4">
      <h2 className="mb-4 text-center">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤</h2>

      <div className="row mb-4 text-center">
        <div className="col-md-6 mb-3">
          <div className="p-3 bg-light rounded shadow-sm">
            <p className="mb-1 text-secondary">–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É —Å–∏—Å—Ç–µ–º—ñ</p>
            <h4 className="fw-bold text-primary">{stats.totalClients}</h4>
          </div>
        </div>
        <div className="col-md-6 mb-3">
          <div className="p-3 bg-light rounded shadow-sm">
            <p className="mb-1 text-secondary">–°–µ—Ä–µ–¥–Ω—å–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –≤—ñ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤</p>
            <h4 className="fw-bold text-primary">{stats.avgAge}</h4>
          </div>
        </div>
      </div>

      <div className="d-flex justify-content-between mb-3">
        <input
          type="text"
          className="form-control w-50"
          placeholder="–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <div>
          <button className="btn btn-danger me-2" onClick={exportToPDF}>
            <FaFilePdf /> PDF
          </button>
          <button className="btn btn-success" onClick={exportToExcel}>
            <FaFileExcel /> Excel
          </button>
        </div>
      </div>

    <table className="table table-striped table-bordered align-middle">
        <thead className="table-secondary">
          <tr>
            <th>ID</th>
            <th>–Ü–º‚Äô—è</th>
            <th>–ü—Ä—ñ–∑–≤–∏—â–µ</th>
            <th>–ü–∞—Å–ø–æ—Ä—Ç</th>
            <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
            <th>Email</th>
            <th>–û–ø–µ—Ä–∞—Ü—ñ–π</th>
            <th>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</th>
            <th>–î—ñ—ó</th>
          </tr>
        </thead>
        <tbody className="text-center">
          {loadingClients ? (
            <tr><td colSpan="9">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</td></tr>
          ) : filteredClients.length > 0 ? (
            filteredClients.map((c) => (
              <tr key={c.ClientID}>
                <td>{c.ClientID}</td>
                <td>{c.FirstName}</td>
                <td>{c.LastName}</td>
                <td>{c.PassportNumber}</td>
                <td>{c.Phone}</td>
                <td>{c.Email}</td>
                <td>{c.OperationsCount ?? 0}</td>
                <td>{c.CreatedAt ? new Date(c.CreatedAt).toLocaleDateString("uk-UA") : "-"}</td>
                <td>
                  <button
                    className="btn btn-sm btn-outline-info me-1"
                    title="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
                    onClick={() => handleInfo(c.ClientID)}
                  >
                    <FaInfoCircle />
                  </button>
                  <button
                    className="btn btn-sm btn-outline-warning me-1"
                    title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
                    onClick={() => handleEdit(c)}
                  >
                    <FaEdit />
                  </button>
                  <button
                    className="btn btn-sm btn-outline-danger"
                    title="–í–∏–¥–∞–ª–∏—Ç–∏"
                    onClick={() => handleDelete(c.ClientID)}
                  >
                    <FaTrash />
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr><td colSpan="9" className="text-muted">–ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</td></tr>
          )}
        </tbody>
      </table>

      {selectedClient && (
        <ClientInfoModal
          client={selectedClient}
          onClose={() => setSelectedClient(null)}
        />
      )}

      {editClient && (
        <ClientEditModal
          client={editClient}
          onClose={() => setEditClient(null)}
          onSave={handleSaveEdit}
        />
      )}
    </div>
  );
};

export default ClientsInfoTab;