import React, { useEffect, useState } from "react";
import axios from "axios";
import {
  FaTrash,
  FaEdit,
  FaFilePdf,
  FaFileExcel,
} from "react-icons/fa";
import "bootstrap/dist/css/bootstrap.min.css";

import UserEditModal from "./Users modals/UserEditModal";
import UserAddModal from "./Users modals/UserAddModal";

import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

const UsersInfoTab = () => {
  const [users, setUsers] = useState([]);
  const [search, setSearch] = useState("");
  const [editUser, setEditUser] = useState(null);
  const [stats, setStats] = useState({ total: 0, admins: 0, cashiers: 0, avgAge: 0 });
  const [loading, setLoading] = useState(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const res = await axios.get("http://localhost:5000/api/usersAdmin"); // ‚ö†Ô∏è –∑—Ä–æ–±–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π endpoint —É –±–µ–∫–µ–Ω–¥—ñ
      const data = res.data || [];
      setUsers(data);
      calculateStats(data);
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const calculateStats = (data) => {
    if (!data || data.length === 0) {
      setStats({ total: 0, admins: 0, cashiers: 0, avgAge: 0 });
      return;
    }
    const admins = data.filter((u) => u.Rolle === "admin").length;
    const cashiers = data.filter((u) => u.Rolle === "cashier").length;
    const avgAge = Math.round(
      data.reduce((acc, u) => acc + getAge(u.JoinDate), 0) / data.length
    );
    setStats({ total: data.length, admins, cashiers, avgAge });
  };

  const getAge = (JoinDate) => {
    if (!JoinDate) return 0;
    const diff = Date.now() - new Date(JoinDate).getTime();
    return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const handleDelete = async (id) => {
    if (!window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?")) return;
    try {
      await axios.delete(`http://localhost:5000/api/usersAdmin/${id}`);
      const updated = users.filter((u) => u.UserID !== id);
      setUsers(updated);
      calculateStats(updated);
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err);
    }
  };

  // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  const handleEdit = (user) => {
    setEditUser(user);
  };

  const handleSaveEdit = async (updatedUser) => {
    try {
      await axios.put(`http://localhost:5000/api/usersAdmin/${updatedUser.UserID}`, updatedUser);
      const updatedList = users.map((u) =>
        u.UserID === updatedUser.UserID ? { ...u, ...updatedUser } : u
      );
      setUsers(updatedList);
      setEditUser(null);
      calculateStats(updatedList);
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err);
    }
  };

  const [showAddModal, setShowAddModal] = useState(false);

const handleAddUser = async (newUser) => {
  try {
    await axios.post("http://localhost:5000/api/usersAdmin", newUser);
    setShowAddModal(false);
    fetchUsers();
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err);
  }
};

  // –§—ñ–ª—å—Ç—Ä –ø–æ—à—É–∫—É
  const filteredUsers = users.filter((u) =>
    Object.values(u).some((val) =>
      val ? val.toString().toLowerCase().includes(search.toLowerCase()) : false
    )
  );

  // –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è
  const transliterate = (text) => {
    const map = {
      –ê: "A", –∞: "a", –ë: "B", –±: "b", –í: "V", –≤: "v",
      –ì: "H", –≥: "h", “ê: "G", “ë: "g", –î: "D", –¥: "d",
      –ï: "E", –µ: "e", –Ñ: "Ye", —î: "ie", –ñ: "Zh", –∂: "zh",
      –ó: "Z", –∑: "z", –ò: "Y", –∏: "y", –Ü: "I", —ñ: "i",
      –á: "Yi", —ó: "i", –ô: "Y", –π: "y", –ö: "K", –∫: "k",
      –õ: "L", –ª: "l", –ú: "M", –º: "m", –ù: "N", –Ω: "n",
      –û: "O", –æ: "o", –ü: "P", –ø: "p", –†: "R", —Ä: "r",
      –°: "S", —Å: "s", –¢: "T", —Ç: "t", –£: "U", —É: "u",
      –§: "F", —Ñ: "f", –•: "Kh", —Ö: "kh", –¶: "Ts", —Ü: "ts",
      –ß: "Ch", —á: "ch", –®: "Sh", —à: "sh", –©: "Shch", —â: "shch",
      –Æ: "Yu", —é: "iu", –Ø: "Ya", —è: "ia",
    };
    return text.split("").map((char) => map[char] || char).join("");
  };

  // –ï–∫—Å–ø–æ—Ä—Ç —É PDF
  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.text(transliterate("User Report"), 14, 15);

    autoTable(doc, {
      startY: 25,
      head: [[transliterate("ID"), transliterate("–Ü–º‚Äô—è"), transliterate("–ü—Ä—ñ–∑–≤–∏—â–µ"), transliterate("–†–æ–ª—å"), transliterate("Email"), transliterate("–¢–µ–ª–µ—Ñ–æ–Ω")]],
      body: filteredUsers.map((u) => [
        u.UserID,
        transliterate(u.FirstName),
        transliterate(u.LastName),
        u.Rolle,
        transliterate(u.Email),
        transliterate(u.Phone || "-"),
      ]),
    });

    doc.save("users_report.pdf");
  };

  // –ï–∫—Å–ø–æ—Ä—Ç —É Excel
  const exportToExcel = () => {
    const wsData = filteredUsers.map((u) => ({
      ID: u.UserID,
      –Ü–º º—è: u.FirstName,
      –ü—Ä—ñ–∑–≤–∏—â–µ: u.LastName,
      –†–æ–ª—å: u.Rolle,
      Email: u.Email,
      –¢–µ–ª–µ—Ñ–æ–Ω: u.Phone || "-",
      –î–∞—Ç–∞_–ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è: u.JoinDate ? new Date(u.JoinDate).toLocaleDateString("uk-UA") : "-",
    }));

    const ws = XLSX.utils.json_to_sheet(wsData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏");
    const wbout = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    saveAs(new Blob([wbout], { type: "application/octet-stream" }), "users.xlsx");
  };

  return (
    <div className="card shadow-sm p-4">
      <h4 className="text-primary mb-3">–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏ –±–∞–Ω–∫—É</h4>

      <div className="d-flex justify-content-between align-items-center mb-3">
        <input
          type="text"
          className="form-control w-50"
          placeholder="–ü–æ—à—É–∫..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <div>
        <button className="btn btn-primary me-3" onClick={() => setShowAddModal(true)}>
            –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        </button>
          <button className="btn btn-danger me-2" onClick={exportToPDF}>
            <FaFilePdf /> PDF
          </button>
          <button className="btn btn-success" onClick={exportToExcel}>
            <FaFileExcel /> Excel
          </button>
        </div>
      </div>

      <div className="alert alert-info">
        <strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong> –ó–∞–≥–∞–ª–æ–º {stats.total} –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ ‚Äî{" "}
        {stats.admins} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤, {stats.cashiers} –∫–∞—Å–∏—Ä—ñ–≤. <br />
        –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ —Ä–æ–±–æ—Ç–∏: {stats.avgAge} —Ä–æ–∫—ñ–≤.
      </div>

      {loading ? (
        <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
      ) : (
        <div className="table-responsive">
          <table className="table table-striped table-bordered align-middle">
            <thead className="table-secondary">
              <tr>
                <th>ID</th>
                <th>–Ü–º‚Äô—è</th>
                <th>–ü—Ä—ñ–∑–≤–∏—â–µ</th>
                <th>–†–æ–ª—å</th>
                <th>Email</th>
                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                <th>–î–∞—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è</th>
                <th>–î—ñ—ó</th>
              </tr>
            </thead>
            <tbody>
              {filteredUsers.map((u) => (
                <tr key={u.UserID}>
                  <td>{u.UserID}</td>
                  <td>{u.FirstName}</td>
                  <td>{u.LastName}</td>
                  <td>
                    <span className={`badge bg-${u.Rolle === "admin" ? "danger" : "success"}`}>
                      {u.Rolle}
                    </span>
                  </td>
                  <td>{u.Email}</td>
                  <td>{u.Phone || "‚Äî"}</td>
                  <td>{u.JoinDate ? new Date(u.JoinDate).toLocaleDateString("uk-UA") : "-"}</td>
                  <td>
                    <button
                      className="btn btn-sm btn-outline-primary me-2"
                      onClick={() => handleEdit(u)}
                    >
                      <FaEdit />
                    </button>
                    <button
                      className="btn btn-sm btn-outline-danger"
                      onClick={() => handleDelete(u.UserID)}
                    >
                      <FaTrash />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      {editUser && (
            <UserEditModal
                user={editUser}
                onClose={() => setEditUser(null)}
                onSave={handleSaveEdit}
            />
            )}

            {showAddModal && (
            <UserAddModal
                onClose={() => setShowAddModal(false)}
                onAdd={handleAddUser}
            />
            )}

    </div>
  );
};

export default UsersInfoTab;
