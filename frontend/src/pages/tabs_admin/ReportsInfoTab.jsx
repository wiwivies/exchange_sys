import React, { useState, useEffect } from "react";
import { Button, Table, Form, Row, Col } from "react-bootstrap";
import axios from "axios";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from "xlsx";

export default function ReportsInfoTab() {
  const [operations, setOperations] = useState([]);
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");
  const [cashierId, setCashierId] = useState("");
  const [pointId, setPointId] = useState("");
  const [stats, setStats] = useState({ totalOperations: 0, mostPopularCurrency: "‚Äî" });

  useEffect(() => {
    fetchStats();
    fetchOperations();
  }, []);

  const fetchStats = async () => {
    try {
      const res = await axios.get("http://localhost:5000/api/admin/getAdminStats");
      setStats(res.data);
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err);
    }
  };

  const fetchOperations = async () => {
    try {
      const res = await axios.get("http://localhost:5000/api/admin/getAdminReport", {
        params: { fromDate, toDate, cashierId, pointId },
      });
      setOperations(res.data || []);
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π:", err);
    }
  };

    // –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è
  const transliterate = (text) => {
    const map = {
      –ê: "A", –∞: "a", –ë: "B", –±: "b", –í: "V", –≤: "v",
      –ì: "H", –≥: "h", “ê: "G", “ë: "g", –î: "D", –¥: "d",
      –ï: "E", –µ: "e", –Ñ: "Ye", —î: "ie", –ñ: "Zh", –∂: "zh",
      –ó: "Z", –∑: "z", –ò: "Y", –∏: "y", –Ü: "I", —ñ: "i",
      –á: "Yi", —ó: "i", –ô: "Y", –π: "y", –ö: "K", –∫: "k",
      –õ: "L", –ª: "l", –ú: "M", –º: "m", –ù: "N", –Ω: "n",
      –û: "O", –æ: "o", –ü: "P", –ø: "p", –†: "R", —Ä: "r",
      –°: "S", —Å: "s", –¢: "T", —Ç: "t", –£: "U", —É: "u",
      –§: "F", —Ñ: "f", –•: "Kh", —Ö: "kh", –¶: "Ts", —Ü: "ts",
      –ß: "Ch", —á: "ch", –®: "Sh", —à: "sh", –©: "Shch", —â: "shch",
      –Æ: "Yu", —é: "iu", –Ø: "Ya", —è: "ia",
    };
    return text.split("").map((char) => map[char] || char).join("");
  };
  
const exportToPDF = () => {
  const doc = new jsPDF();
  doc.setFontSize(16);
  doc.text("Administrative report", 14, 15);

  const tableColumn = [
    "ID",
    "Cashier",
    "Client",
    "Point",
    "Currency 1*",
    "Amount",
    "Currency 2*",
    "Result",
    "Date/time",
  ];

  const tableRows = operations.map((op) => [
    op.OperationID,
    transliterate(op.CashierName),
    transliterate(op.ClientName),
    transliterate(op.PointName),
    transliterate(op.FromCurrency),
    op.AmountFrom,
    transliterate(op.ToCurrency),
    op.AmountTo,
    new Date(op.OperationDate).toLocaleString("uk-UA"),
  ]);

  autoTable(doc, { head: [tableColumn], body: tableRows, startY: 25 });
  doc.save("admin_report.pdf");
};

  const exportToExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet(operations);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Admin Report");
    XLSX.writeFile(workbook, "admin_report.xlsx");
  };

  return (
    <div className="p-4 bg-light rounded">

      {/* –ö–∞—Ä—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      <div className="d-flex gap-3 mb-4 flex-wrap">
        <div className="p-3 bg-primary text-white rounded flex-fill text-center shadow-sm">
          <h6>–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ –¥–µ–Ω—å</h6>
          <h3>{stats.totalOperations}</h3>
        </div>
        <div className="p-3 bg-info text-white rounded flex-fill text-center shadow-sm">
          <h6>–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ –≤–∞–ª—é—Ç–∞</h6>
          <h3>{stats.mostPopularCurrency}</h3>
        </div>
        <div className="p-3 bg-secondary text-white rounded flex-fill text-center shadow-sm">
          <h6>–í–∞–ª—é—Ç–Ω–∞ –±–∞–∑–∞</h6>
          <h3>ExchangeSys</h3>
        </div>
      </div>

      {/* üîç –§—ñ–ª—å—Ç—Ä–∏ */}
      <div className="p-3 bg-white border rounded shadow-sm mb-4">
        <h6 className="fw-bold mb-3">–§—ñ–ª—å—Ç—Ä –ø–æ—à—É–∫—É</h6>
        <Row className="g-3 align-items-center">
          <Col xs={12} md={3}>
            <Form.Label>–í—ñ–¥ –¥–∞—Ç–∏</Form.Label>
            <Form.Control
              type="date"
              value={fromDate}
              onChange={(e) => setFromDate(e.target.value)}
            />
          </Col>
          <Col xs={12} md={3}>
            <Form.Label>–î–æ –¥–∞—Ç–∏</Form.Label>
            <Form.Control
              type="date"
              value={toDate}
              onChange={(e) => setToDate(e.target.value)}
            />
          </Col>
          <Col xs={12} md={3}>
            <Form.Label>ID –∫–∞—Å–∏—Ä–∞</Form.Label>
            <Form.Control
              type="number"
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1"
              value={cashierId}
              onChange={(e) => setCashierId(e.target.value)}
            />
          </Col>
          <Col xs={12} md={3}>
            <Form.Label>ID –ø—É–Ω–∫—Ç—É</Form.Label>
            <Form.Control
              type="number"
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2"
              value={pointId}
              onChange={(e) => setPointId(e.target.value)}
            />
          </Col>
        </Row>

        {/* –ö–Ω–æ–ø–∫–∏ –ø—ñ–¥ —Ñ—ñ–ª—å—Ç—Ä–æ–º */}
        <div className="d-flex justify-content-between align-items-center mt-4 flex-wrap gap-2">
          <Button variant="primary" onClick={fetchOperations}>
            –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏
          </Button>

          <div className="d-flex gap-2">
            <Button variant="success" onClick={exportToPDF}>
              ‚¨áÔ∏è –ï–∫—Å–ø–æ—Ä—Ç –≤ PDF
            </Button>
            <Button variant="warning" onClick={exportToExcel}>
              ‚¨áÔ∏è –ï–∫—Å–ø–æ—Ä—Ç –≤ Excel
            </Button>
          </div>
        </div>
      </div>

      {/* üìã –¢–∞–±–ª–∏—Ü—è */}
      <Table striped bordered hover responsive>
        <thead className="table-secondary">
          <tr>
            <th>ID</th>
            <th>–ö–∞—Å–∏—Ä</th>
            <th>–ö–ª—ñ—î–Ω—Ç</th>
            <th>–ü—É–Ω–∫—Ç</th>
            <th>–í–∞–ª—é—Ç–∞ 1*</th>
            <th>–°—É–º–∞</th>
            <th>–í–∞–ª—é—Ç–∞ 2*</th>
            <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
            <th>–î–∞—Ç–∞ / —á–∞—Å</th>
          </tr>
        </thead>
        <tbody>
          {operations.length > 0 ? (
            operations.map((op) => (
              <tr key={op.OperationID}>
                <td>{op.OperationID}</td>
                <td>{op.CashierName}</td>
                <td>{op.ClientName}</td>
                <td>{op.PointName}</td>
                <td>{op.FromCurrency}</td>
                <td>{op.AmountFrom}</td>
                <td>{op.ToCurrency}</td>
                <td>{op.AmountTo}</td>
                <td>{new Date(op.OperationDate).toLocaleString("uk-UA")}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={9} className="text-center text-muted">
                –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
              </td>
            </tr>
          )}
        </tbody>
      </Table>

      <p className="mt-2 text-muted" style={{ fontSize: "0.85rem" }}>
        –í–∞–ª—é—Ç–∞ 1* ‚Äî –Ω–∞–¥–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç–æ–º. –í–∞–ª—é—Ç–∞ 2* ‚Äî –≤–∏–¥–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç—É –ø—Ä–∏ –æ–±–º—ñ–Ω—ñ.
      </p>
    </div>
  );
}
